#!/usr/bin/env python

from pathlib import Path

import typer
import pandas as pd

pangolin_columns = [
  'taxon',
  'lineage',
  'probability',
  'pangoLEARN_version',
  'status',
  'note'
]

table_front_matter = """
# plot_type: 'table'
# section_name: 'Pangolin Lineage Assignment'
# section_href: 'https://github.com/cov-lineages/pangolin'
# description: 'Global SARS-CoV-2 lineage assignment results generated by Pangolin.'
# pconfig:
#     namespace: 'Pangolin Lineage Assignment'
# headers:
#     taxon:
#         title: 'Sample'
#         description: 'Sample or taxon from Pangolin lineage_report.csv'
#     lineage:
#         title: 'Lineage'
#         description: 'Global lineage assigned by Pangolin'
#     probability:
#         title: 'Probability'
#         description: 'Pangolin lineage assignment probability'
#         format: '{:.1%}'
#     pangoLEARN_version:
#         title: 'PangoLEARN version'
#         description: 'Version of PangoLEARN'
#     status:
#         title: 'QC Status'
#         description: 'Pangolin QC status'
#     note:
#         title: 'Note'
#         description: 'Mash screen p-value'
"""



def main(input_directory,
         mqc_summary_output):
    """Summarize Pangolin results for MultiQC"""
    dir_path = Path(input_directory)
    dfs = []
    for csv_path in dir_path.glob('*.csv'):
        df = pd.read_csv(csv_path)
        dfs.append(df)
    dfout = pd.concat(dfs)
    dfout.sort_values('taxon', inplace=True)
    dfout.set_index('taxon', inplace=True)
    with open(mqc_summary_output, 'w') as fout:
        fout.write(table_front_matter)
        dfout.to_csv(fout, sep='\t')


if __name__ == '__main__':
    typer.run(main)
