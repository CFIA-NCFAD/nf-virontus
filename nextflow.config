/*
 * -------------------------------------------------
 *  CFIA-NCFAD/nf-virontus Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

params {
  input                             = ''
  save_cat_reads                    = true
  output_hardclipped_reads          = false

  // Reference genome params
  genome                            = ''
  fasta                             = ''
  gff                               = ''
  save_reference                    = true
  // Amplicon primer params
  primer_bed                        = ''
  left_primer_suffix                = '_LEFT'
  right_primer_suffix               = '_RIGHT'

  clair3_variant_model              = 'r941_prom_sup_g5014'
  clair3_user_variant_model         = ''

  // QC
  min_sample_reads                  = 100

  // convenience params for SARS-CoV-2 analysis
  scov2                             = false
  freed                             = false
  artic_v3                          = false
  artic_v4                          = false
  artic_v4_1                        = false

  // NanoPlot options
  sequencing_summary                = ''

  // iVar parameters
  ivar_trim_noprimer                = false

  // Mosdepth options
  mosdepth_window_size              = false

  // Nextclade params
  nextclade_dataset = 'sars-cov-2'
  nextclade_dataset_path = ''

  // variant filtering parameters
  minor_allele_fraction             = 0.25
  major_allele_fraction             = 0.75

  // consensus sequence parameters
  low_coverage                      = 10

  // Kraken2
  kraken2_db                        = ''
  subtract_host                     = true

  // Skipping processes
  skip_kraken2                      = false
  skip_nanoplot                     = false

  // Boilerplate options
  outdir                            = './results'
  tracedir                          = "${params.outdir}/pipeline_info"
  publish_dir_mode                  = 'copy'
  email                             = null
  email_on_fail                     = null
  plaintext_email                   = false
  help                              = false
  monochrome_logs                   = false
  multiqc_config                    = ''
  singularity_pull_docker_container = false
  validate_params                   = true
  show_hidden_params                = false
  schema_ignore_params              = 'genomes,modules,igenomes_base'

  // SLURM cluster options
  slurm_queue                       = null
  slurm_queue_size                  = 100

  // Max resource options
  // Defaults only, expecting to be overwritten
  max_memory                        = '32.GB'
  max_cpus                          = 16
  max_time                          = '240.h'
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'
includeConfig 'conf/genomes.config'
// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

profiles {
  debug { process.beforeScript = 'echo $HOSTNAME' }
  conda {
    conda.enabled          = true
    docker.enabled         = false
    singularity.enabled    = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false
    // Increase time available to build Conda environment
    conda.createTimeout    = "120 min"
  }
  mamba {
    conda.enabled          = true
    useMamba               = true
    docker.enabled         = false
    singularity.enabled    = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false
    // Increase time available to build Conda environment
    conda.createTimeout    = "120 min"
  }
  docker {
    docker.enabled         = true
    docker.userEmulation   = true
    singularity.enabled    = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false
  }
  singularity {
    singularity.enabled    = true
    singularity.autoMounts = true
    docker.enabled         = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false
  }
  podman {
    podman.enabled         = true
    docker.enabled         = false
    singularity.enabled    = false
    shifter.enabled        = false
    charliecloud.enabled   = false
  }
  shifter {
    shifter.enabled        = true
    docker.enabled         = false
    singularity.enabled    = false
    podman.enabled         = false
    charliecloud.enabled   = false
  }
  charliecloud {
    charliecloud.enabled   = true
    docker.enabled         = false
    singularity.enabled    = false
    podman.enabled         = false
    shifter.enabled        = false
  }
  slurm {
    includeConfig 'conf/slurm.config'
  }
  test {
    includeConfig 'conf/test.config'
  }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
  enabled = true
  file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
  enabled = true
  file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
  enabled = true
  file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
  enabled = true
  file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}

manifest {
  name = 'CFIA-NCFAD/nf-virontus'
  description = 'Nextflow workflow for Nanopore sequence analysis of viruses'
  homePage = 'https://github.com/CFIA-NCFAD/nf-virontus'
  author = 'Peter Kruczkiewicz'
  version = '2.0.0dev'
  mainScript = 'main.nf'
  nextflowVersion = "!>=21.04.0"
}

// Borrowed from nf-core tools create
// Function to ensure that resource requirements don't go beyond a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
