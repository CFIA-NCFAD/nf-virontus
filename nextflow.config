/*
 * -------------------------------------------------
 *  peterk87/nf-virontus Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

params {
  outdir = 'results'
  tracedir = "${params.outdir}/pipeline_info"
  reads = false
  sample_sheet = false
  fasta = false // reference genome FASTA
  gff = false // reference genome GFF
  bed = false // primer scheme BED file
  // convenience params for SARS-CoV-2 analysis
  scov2 = true // set SARS-CoV-2 as reference genome 
  freed = false // trim primers for 1200bp amplicon Freed 2020 protocol
  articv3 = false // trim primers for ARTIC V3 protocol 
  genome = false
  genomes = [
    'MN908947.3': [
      'fasta': "$projectDir/data/sars-cov-2/MN908947.3.fa",
      'gff': "$projectDir/data/sars-cov-2/MN908947.3.gff",
      'schemes': [
        'Freed': "$projectDir/data/sars-cov-2/primer_schemes/Freed_2020.bed",
        'ARTIC_V3': "$projectDir/data/sars-cov-2/primer_schemes/ARTIC_V3.bed"
      ]
    ]
  ]
  // Medaka variant calling parameters
  medaka_model = 'r941_min_high_g360'
  medaka_chunk_len = 800
  medaka_chunk_overlap = 400
  // variant filtering parameters
  minor_allele_fraction = 0.25
  major_allele_fraction = 0.75
  // consensus sequence parameters
  low_coverage = 10
  no_coverage = 0
  low_cov_char = 'N'
  no_cov_char = '-'

  tree = false // generate phylogenetic tree from consensus sequences with MAFFT and IQ-TREE
  iqtree_model = 'GTR'
  tree_extra_fasta = false
  tree_extra_metadata = false

  // Kraken2
  kraken2_db = checkPathExists(getEnvValue("KRAKEN2_DB", null))
  skip_kraken = false

  // saving data
  save_reference = true
  save_cat_reads = true

  // SLURM cluster options
  slurm_queue = null
  slurm_queue_size = 100

  // Boilerplate options
  publish_dir_mode = 'copy'
  name = false
  help = false
  monochrome_logs = false
  container = 'peterk87/nf-virontus:2.0.0'
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'
process.container = params.container

profiles {
  conda { process.conda = "$projectDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker.enabled = true
  }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
  }
  slurm {
    includeConfig 'conf/slurm.config'
  }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/execution_dag.svg"
}

manifest {
  name = 'peterk87/nf-virontus'
  description = 'Nextflow workflow for Nanopore sequence analysis of viruses'
  homePage = 'https://github.com/peterk87/nf-virontus'
  author = 'Peter Kruczkiewicz'
  version = '2.0.0'
  mainScript = 'main.nf'
  nextflowVersion = ">=19.10"
}

// If parent path exists, then return `p`, else return null
def checkParentExists(p) {
  if (p == null || p instanceof Boolean) {
    return null
  }
  f = new File(p)
  if ((new File(f.parent)).exists()) {
    p
  } else {
    null
  }
}

// If path exists, return `p`, else return null
def checkPathExists(p) {
  if (p == null || p instanceof Boolean) {
    return null
  }
  f = new File(p)
  if (f.exists()) {
    p
  } else {
    null
  }
}

// Try to get a system environment variable value with some key. If the key
// doesn't exist, then return a default value
def getEnvValue(envKey, defaultValue = null) {
  envMap = new HashMap(System.getenv())
  if (envMap.containsKey(envKey)) {
    envMap[envKey]
  } else {
    defaultValue
  }
}

// Borrowed from nf-core tools create
// Function to ensure that resource requirements don't go beyond a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
