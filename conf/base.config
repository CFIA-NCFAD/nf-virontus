/* -------------------------------------------------
 *  Base Nextflow config file
 * -------------------------------------------------
 * This file contains basic process requirement setup. It DOES NOT
 * contain any config for cluster, so will run in default mode by
 * itself. It should be used with the max_memory, max_cpus and
 * max_time params for customising hardware limits
 */

process {

  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 1.GB * task.attempt, 'memory' ) }
  time = { check_max( 1.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [1,143,137,104,134,139] ? 'retry' : 'terminate' }
  maxRetries = 3
  maxErrors = '-1'
  withName: BARCODER {
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  }
  withName: MAP {
    cpus = { check_max(4 * task.attempt, 'cpus') }
  }
  withName: BCF_CALL {
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
    cpus = { check_max(8 * task.attempt, 'cpus') }
  }
  withName: BCF_FILTER {
    cpus = { check_max(4 * task.attempt, 'cpus') } 
  }
  withName: FIX_CONSENSUS {
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
    memory = { check_max( 1.GB * task.attempt, 'memory' ) }
  }
  withName: CENTRIFUGE {
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
    cpus = 1
    memory = { check_max( 64.GB * task.attempt, 'memory' ) }
  }
  withName: UNICYCLER_ASSEMBLY {
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
    cpus = { check_max( 8 * task.attempt, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
  }
  withName: FLYE_ASSEMBLY {
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
    cpus = { check_max( 8 * task.attempt, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) } 
  }
  withName: KRAKEN2 {
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
    cpus = { check_max( 8 * task.attempt, 'cpus' ) }
    memory = { check_max( 48.GB * task.attempt, 'memory' ) }
  }
  withName: FILTER_READS_BY_CLASSIFICATIONS {
    memory = { check_max(8.GB * task.attempt, 'memory') }
  }
}

params {
  // Defaults only, expecting to be overwritten
  max_memory = 256.GB
  max_cpus = 48
  max_time = 240.h
}
